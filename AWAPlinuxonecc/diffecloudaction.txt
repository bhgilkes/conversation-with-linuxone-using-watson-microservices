27,29c27,28
< var vserverID="CMA_VirtualServerID";
< var tenantID="CMA_TenantID";
< 
---
> var vserverID="5fde2b95-f50b-47a2-9bf3-008a4ececad6";
> var tenantID="87720db25dec44d0bc4413dab53c52fd";
36a36
> function customizeMessageFromAWAP(req, response, action) {
38c38
< function executeProvisioningFromDialog(req, res) {
---
> 	var json = JSON.parse(response);
40,41c40,593
< 	var reqbody = JSON.stringify(req.body);
< 	var provisionProjectselected;
---
> 	if (action === "getCMAtenants") {
> 		// Retrieve Admin project name
> 		responsefromAWAP = json.tenants[1].name;
> 		console.log("Response from AWAP:*****" + responsefromAWAP);
> 		/*
> 		 * var arr = string.split("\\"); console.log("array"); for (i=0;i<
> 		 * 2;i++){ var str= arr[i].split(","); var jsonObj= {};
> 		 * jsonObj.description =str[0]; jsonObj.enabled= str[1]; jsonObj.job =
> 		 * str[2];
> 		 *  }
> 		 */
> 	}
> 
> 	if (action === "createCMAvserver") {
> 		// Retrieve Virtual Server detailed information
> 		console.log("Reponse is set to : " + response);
> 		vserverID = json.server.id;
> 		tenantID = tenants[1].id;
> 		console.log("vServer ID: " + vserverID + " on the tenant: " + tenantID);
> 		//responsefromAWAP = "";
> 		// wait 10 seconds
> 		//sleep(10000);
> 		
> 		//getCMAvirtualserverInfo(tenantID, vserverID);
> 
> 		console.log("Response from AWAP:*****" + responsefromAWAP);
> 	}
> 
> 	return responsefromAWAP;
> }
> 
> function initVRAauth(req, res) {
> 
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
> 	var location = req.body.context.location;
> 	
> 	console.log("initVRAauth for the following location:"+location);
> 	// var location = "POK";
> 	// Workload placement if location is MOP orPOK use specific servers
> 	if (location === "MOP") {
> 	var oauthHostname = "vra72.iccmpl.demo";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:17216";
> 	// var oauthPath = "/v2.0/tokens";
> 	var oauthPath = "/identity/api/tokens";
> 	console.log("MOP Entry in initVRAauth");
> 	// var post_data = '{"auth":{"passwordCredentials":{"username":"admin",
> 	// "password":"something"}},"scope": { "project": { "domain": { "name":
> 	// "Default" }, "name": "admin" } }}';
> 	var post_data = '{"username":"Sebastien@iccmpl.demo","password":"Passw0rd","tenant":"vsphere.local"}';
> 	var oauthOptions = {
> 			hostname : oauthHostname,
> 			port : "",
> 			path : oauthPath,
> 			method : 'POST',
> 			rejectUnauthorized : false,
> 			headers : {
> 				'Content-Type' : 'application/json',
> 				'Content-Length' : Buffer.byteLength(post_data),
> 				'Accept' : 'application/json'
> 			}};
> 	}
> 	else if (location === "POK") {
> 			var oauthHostname = "cap-sg-prd-1.integration.ibmcloud.com";
> 			//  A DECOMMENTER var oauthHostname = "vradva.sanfran.pbm.ihost.com";
> 			//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:17216";
> 			// var oauthPath = "/v2.0/tokens";
> 			var oauthPath = "/identity/api/tokens";
> 			console.log("POK Entry in initVRAauth");
> 			// var post_data = '{"auth":{"passwordCredentials":{"username":"admin",
> 			// "password":"something"}},"scope": { "project": { "domain": { "name":
> 			// "Default" }, "name": "admin" } }}';
> 			var post_data = '{"username":"IBMTest","password":"0ECH0pmc","tenant":"vsphere.local"}';
> 			var oauthOptions = {
> 					hostname : oauthHostname,
> 					port : "16532",
> 					//port : "",
> 					path : oauthPath,
> 					method : 'POST',
> 					rejectUnauthorized : false,
> 					headers : {
> 						'Content-Type' : 'application/json',
> 						'Content-Length' : Buffer.byteLength(post_data),
> 						'Accept' : 'application/json'
> 					}	
> 		}
> 	};
> 
> 	// process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
> 	var oauthPost_req = https.request(oauthOptions, function(ans) {
> 		ans.setEncoding('utf8');
> 		var str = '';
> 		ans.on('data', function(chunk) {
> 			str += chunk;
> 		});
> 		ans.on('end', function() {
> 			console.log("**** Rest API Response ***" + str);
> 			console.log("***Http Status code***" + ans.statusCode);
> 			// console.log("HEADERS LIST ******"+ans.rawHeaders);
> 
> 			console.log("HEADERS LIST NUM 2 ******"
> 					+ JSON.stringify(ans.headers));
> 
> 			if (ans.statusCode !== 200 && ans.statusCode !== 201
> 					&& ans.statusCode !== 202) {
> 				console.error('ERROR WITH OAUTH TOKEN');
> 			} else {
> 
> 				var json = JSON.parse(str);
> 				console.log("logging the Bearer Token: " + json.id);
> 
> 				if (json && json.id !== '') {
> 					oauthToken = json.id;
> 					console.log("TOKEN IS NOW SET TO: " + oauthToken);
> 
> 					// getCMAtenants(req, res);
> 				}
> 			}
> 			res.sendStatus(200);
> 		});
> 	});
> 	oauthPost_req.on('error', function(err) {
> 	    // Printing the error message. Mainly connection reset
> 		console.log('Caught exception: ' + err);
> 	});
> 	oauthPost_req.write(post_data);
> 	oauthPost_req.end();
> 
> }
> 
> function createVRAvServer(req, res) {
> 
> 	// var clientSecret = "anypass";
> 	var oauthPath;
> 	var post_data;
> 	var location = req.body.context.location;
> 	var blueprintToDeploy = req.body.context.imageChoice;
> 	var platformToDeploy = req.body.context.platformChoice;
> 	var descriptionCustomVRA = req.body.context.description;
> 	var flavorSelectedForVRA=req.body.context.flavorInfo;
> 	console.log("Blueprint selected for VRA deployment : " + blueprintToDeploy);
> 	console.log("Description for VRA blueprint deployment: "
> 			+ descriptionCustomVRA);
> 	// WORKLOAD PLACEMENT INTO MOP LOCATION HERE
> 	if (location === "MOP") {
> 	var oauthHostname = "vra72.iccmpl.demo";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:17216";
> 	// var oauthPath = "/v2.0/tokens";
> 	
> 	// Check if a Flavor has been provided by the user during the conversation for this service 
> 	if (flavorSelectedForVRA === "large") {
> 		console.log('Large vm size Selected');
> 		flavorID = "49b9602c-19b0-4015-bab6-6a78a6fae9ad";
> 	} else {
> 
> 		if (flavorSelectedForVRA === "medium") {
> 			console.log('Medium vm size Selected');
> 			flavorID = "03fbd4c1-1756-49aa-a0fb-0aa9e10304e3";
> 		} else {
> 			console.log('Default small size vm Selected');
> 			flavorID = "35a7752f-e463-44f4-8e4c-73d499550f62";
> 		}
> 	}
> 	
> 	if (blueprintToDeploy === "Ubuntu") {
> 		
> 		// the id = 6b630e53-9c95-4dc2-a2eb-6c6a79bf7efb correspond to the
> 		// UBUNTU 16.04 Catalog Item in vRA.
> 		oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/6b630e53-9c95-4dc2-a2eb-6c6a79bf7efb/requests";
> 		// Here under this is a json template request for this catalog item.
> 		// Customized with a small flavor as an example and a description
> 		post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"6b630e53-9c95-4dc2-a2eb-6c6a79bf7efb","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 			+ descriptionCustomVRA
> 			+ '","data":{"Ubuntu16.04Newton":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Ubuntu1604Newton*Ubuntu16.04Newton","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"description":"Ubuntu 16.04 Image ready for deployment on IBM LinuxONE Systems","flavor":"'+flavorID+'","key_pair":"0","machine_prefix":null,"max_per_user":0,"memory":1024,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 	} else if (blueprintToDeploy === "SLES") {
> 		// the id = bedc7fd6-9867-440b-8061-c9110bb9a619 correspond to the
> 		// SLES12 SP2 Catalog Item in vRA
> 		oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/bedc7fd6-9867-440b-8061-c9110bb9a619/requests";
> 		// Here under this is a json template request for this catalog item.
> 		// Customized with a medium flavor as an example and a description
> 		post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"bedc7fd6-9867-440b-8061-c9110bb9a619","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"SLES12_SP2":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Sles12SP2*SLES12_SP2","data":{"_cluster":1,"_hasChildren":false,"cpu":2,"description":"Sles 12 SP2 Image for IBM LinuxONE Systems","flavor":"'+flavorID+'","key_pair":"0","machine_prefix":null,"max_per_user":0,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 	}
> 	else if (blueprintToDeploy === "Redhat") {
> 		if (platformToDeploy=="Power") {
> 			// the id = 75a4723f-e459-4fe7-aa1b-d43aa41c089d correspond to the
> 			// Redhat 7.3 for POWER Catalog Item in vRA
> 			oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/75a4723f-e459-4fe7-aa1b-d43aa41c089d/requests";
> 			// Here under this is a json template request for this catalog item.
> 			// Customized with a medium flavor as an example and a description
> 			post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"75a4723f-e459-4fe7-aa1b-d43aa41c089d","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 					+ descriptionCustomVRA
> 					+ '","data":{"OpenStack_Machine_1":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"RedHat73onPowerLE*OpenStack_Machine_1","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"description":null,"flavor":"19c47d45-760d-4ed0-809a-50e694ccace9","key_pair":"0","max_per_user":0,"memory":2048,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 		}
> 		else {
> 		// the id = bd4101e8-c208-410a-9826-fc0aa6058ff7 correspond to the
> 		// Redhat 7.3 Catalog Item in vRA
> 		oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/bd4101e8-c208-410a-9826-fc0aa6058ff7/requests";
> 		// Here under this is a json template request for this catalog item.
> 		// Customized with a medium flavor as an example and a description
> 		post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"bd4101e8-c208-410a-9826-fc0aa6058ff7","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"Redhat7.3":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"zCloudNewton*Redhat7.3","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"description":"Redhat 7.3 Image ready for deployment on IBM LinuxONE Systems","flavor":"'+flavorID+'","key_pair":"0","machine_prefix":null,"max_per_user":0,"memory":1024,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 	}
> 		}
> 	else if (blueprintToDeploy === "AIX") {
> 		// the id = a29c07de-34fd-44a4-aca2-67962c65a1c8 correspond to the
> 		// AIX 7.1 Simple Blueprint Catalog Item in vRA
> 		oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/a29c07de-34fd-44a4-aca2-67962c65a1c8/requests";
> 		// Here under this is a json template request for this catalog item.
> 		// Customized with a medium flavor as an example and a description
> 		post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"a29c07de-34fd-44a4-aca2-67962c65a1c8","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"OpenStack_Machine_1":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"1stPowerBP*OpenStack_Machine_1","data":{"_cluster":1,"_hasChildren":false,"description":null,"flavor":"19c47d45-760d-4ed0-809a-50e694ccace9","key_pair":"0","max_per_user":0,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 	}
> 	else if (blueprintToDeploy === "CentOS") {
> 		// the id = 6fc621f6-5472-4f9f-99b9-67e8b8e7e212 correspond to the
> 		// CentOS 7.2 Base on x86 Simple Blueprint Catalog Item in vRA
> 		oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/6fc621f6-5472-4f9f-99b9-67e8b8e7e212/requests";
> 		// Here under this is a json template request for this catalog item.
> 		// Customized with a medium flavor as an example and a description
> 		post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"6fc621f6-5472-4f9f-99b9-67e8b8e7e212","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"dda4e9c0-340d-4a45-be7f-f49d1f915121","description":"Deployed from Application AWAP","reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"SandboxMT330":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Centos72Base*SandboxMT330","data":{"_hasChildren":false,"description":null}},"_leaseDays":1,"_number_of_instances":1,"vSphere_Machine_1":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Centos72Base*vSphere_Machine_1","data":{"_allocation":{"componentTypeId":"com.vmware.csp.iaas.blueprint.service","componentId":null,"classId":"Infrastructure.Compute.Machine.Allocation","typeFilter":null,"data":{"machines":[{"componentTypeId":"com.vmware.csp.iaas.blueprint.service","componentId":null,"classId":"Infrastructure.Compute.Machine.Allocation.Machine","typeFilter":null,"data":{"machine_id":"","nics":[{"componentTypeId":"com.vmware.csp.iaas.blueprint.service","componentId":null,"classId":"Infrastructure.Compute.Machine.Nic","typeFilter":null,"data":{"address":"","assignment_type":"Static","external_address":"","id":null,"load_balancing":null,"network":null,"network_profile":null}}]}}]}},"_cluster":1,"_hasChildren":false,"cpu":1,"datacenter_location":null,"description":null,"disks":[{"componentTypeId":"com.vmware.csp.iaas.blueprint.service","componentId":null,"classId":"Infrastructure.Compute.Machine.MachineDisk","typeFilter":null,"data":{"capacity":16,"custom_properties":null,"id":1488363768623,"initial_location":"","is_clone":true,"label":"Hard disk 1","storage_reservation_policy":"","userCreated":false,"volumeId":0}}],"display_location":false,"guest_customization_specification":"vra_linux","machine_prefix":null,"max_network_adapters":-1,"max_per_user":0,"memory":2048,"nics":null,"os_arch":"x86_64","os_distribution":null,"os_type":"Linux","os_version":null,"property_groups":null,"reservation_policy":null,"security_groups":[],"security_tags":[],"source_machine_external_snapshot":null,"source_machine_vmsnapshot":null,"storage":16}}}}';
> 	}
> 	console.log("Entry in createVRAvServer");
> 
> 	var bearer = "Bearer " + oauthToken;
> 	console.log("****** " + bearer);
> 	var oauthOptions = {
> 		hostname : oauthHostname,
> 		port : "",
> 		path : oauthPath,
> 		method : 'POST',
> 		rejectUnauthorized : false,
> 		headers : {
> 			'Content-Type' : 'application/json',
> 			'Authorization' : 'Bearer ' + oauthToken
> 
> 		}
> 	};}
> 	// WORKLOAD PLACEMENT INTO POK LOCATION HERE
> 	else if (location === "POK") { 
> 		 var oauthHostname = "cap-sg-prd-1.integration.ibmcloud.com";
> 		// A DECOMMENTER var oauthHostname = "vradva.sanfran.pbm.ihost.com";
> 		//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:17216";
> 		// var oauthPath = "/v2.0/tokens";
> 		
> 		// Check if a Flavor has been provided by the user during the conversation for this service
> 		// The flavorID will have to change based on the service. It is not the same for AIX on power than 
> 		// the one for RHEL on z/VM. PlatformSelection is required and event VirtualizationMode will be required.
> 		// It is best to move the flavor allocation in each service information.Check for POK Rhel for z/VM
> 		if (flavorSelectedForVRA === "large") {
> 			console.log('Large vm size Selected');
> 			flavorID = "6fb9fa12-afd2-4f17-9074-f6b2c6bcc996"; // POK large
> 		} else {
> 
> 			if (flavorSelectedForVRA === "medium") {
> 				console.log('Medium vm size Selected');
> 				flavorID = "8675f317-0bda-478c-a63b-b16a01fcdf71"; // POK medium
> 			} else {
> 				console.log('Default small size vm Selected');
> 				flavorID = "a35232da-8131-427e-8b75-33c62dd5bd57"; // POK small
> 			}
> 		}
> 		
> 		if (blueprintToDeploy === "Ubuntu") {
> 			
> 			// the id = 6b630e53-9c95-4dc2-a2eb-6c6a79bf7efb correspond to the
> 			// UBUNTU 16.04 Catalog Item in vRA.
> 			oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/6b630e53-9c95-4dc2-a2eb-6c6a79bf7efb/requests";
> 			// Here under this is a json template request for this catalog item.
> 			// Customized with a small flavor as an example and a description
> 			post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"6b630e53-9c95-4dc2-a2eb-6c6a79bf7efb","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"Ubuntu16.04Newton":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Ubuntu1604Newton*Ubuntu16.04Newton","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"description":"Ubuntu 16.04 Image ready for deployment on IBM LinuxONE Systems","flavor":"'+flavorID+'","key_pair":"0","machine_prefix":null,"max_per_user":0,"memory":1024,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 		} else if (blueprintToDeploy === "SLES") {
> 			// the id = bedc7fd6-9867-440b-8061-c9110bb9a619 correspond to the
> 			// SLES12 SP2 Catalog Item in vRA
> 			oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/bedc7fd6-9867-440b-8061-c9110bb9a619/requests";
> 			// Here under this is a json template request for this catalog item.
> 			// Customized with a medium flavor as an example and a description
> 			post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"bedc7fd6-9867-440b-8061-c9110bb9a619","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 					+ descriptionCustomVRA
> 					+ '","data":{"SLES12_SP2":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Sles12SP2*SLES12_SP2","data":{"_cluster":1,"_hasChildren":false,"cpu":2,"description":"Sles 12 SP2 Image for IBM LinuxONE Systems","flavor":"'+flavorID+'","key_pair":"0","machine_prefix":null,"max_per_user":0,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 		}
> 		else if (blueprintToDeploy === "Redhat") {
> 			if (platformToDeploy=="Power") {
> 				// the id = 75a4723f-e459-4fe7-aa1b-d43aa41c089d correspond to the
> 				// Redhat 7.3 for POWER Catalog Item in vRA
> 				oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/75a4723f-e459-4fe7-aa1b-d43aa41c089d/requests";
> 				// Here under this is a json template request for this catalog item.
> 				// Customized with a medium flavor as an example and a description
> 				post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"75a4723f-e459-4fe7-aa1b-d43aa41c089d","requestedFor":"Sebastien@iccmpl.demo","businessGroupId":"2ac18abe-64ad-461e-ae19-b634d3344dba","description":"Deployed from Application AWAP","reasons":"'
> 						+ descriptionCustomVRA
> 						+ '","data":{"OpenStack_Machine_1":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"RedHat73onPowerLE*OpenStack_Machine_1","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"description":null,"flavor":"19c47d45-760d-4ed0-809a-50e694ccace9","key_pair":"0","max_per_user":0,"memory":2048,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":null}},"_leaseDays":null,"_number_of_instances":1}}';
> 			}
> 			else {
> 				console.log('Getting into Redhat deployment to POK VRA');
> 				// consider platformtoDeploy is LinuxONE
> 			// the id = 9d090905-d89c-420c-b977-aea6cd9f560c correspond to the
> 			// RHEL for z/VM Catalog Item in POK vRA
> 				//ONLY ONE Flavor small is available for now in POK vra so I force here the flavordID
> 				// OLD flavorID="703ac874-ebdb-407f-a1c5-c23e67091b2d";
> 				flavorID="b7e75728-d781-49a6-909c-b60fc45d5c48";
> 			oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/9d090905-d89c-420c-b977-aea6cd9f560c/requests";
> 			// Here under this is a json template request for this catalog item.
> 			// Customized with a medium flavor as an example and a description
> 			post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"9d090905-d89c-420c-b977-aea6cd9f560c","requestedFor":"IBMTest@SANFRAN.PBM.IHOST.COM","businessGroupId":"3bba782d-4a83-44ed-9ef0-c6cc4f83e9da","description":null,"reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"LoZ":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"LinuxonZ*LoZ","data":{"_cluster":1,"_hasChildren":false,"description":"Linux on Z Rhel on zVM","flavor":"'+flavorID+'","key_pair":"0","max_per_user":0,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":{"componentId":null,"classId":"Infrastructure.Reservation.Policy.ComputeResource","id":"CMA","label":"CMA"}}},"_leaseDays":null,"_number_of_instances":1}}';
> 		}
> 			}
> 		else if (blueprintToDeploy === "AIX") {
> 			// the id = a29c07de-34fd-44a4-aca2-67962c65a1c8 correspond to the
> 			// AIX 7.1 Simple Blueprint Catalog Item in vRA
> 			oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/c2b3150d-f257-4e30-9ae4-97b419ea3934/requests";
> 			// Here under this is a json template request for this catalog item.
> 			// Customized with a medium flavor as an example and a description
> 			post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"c2b3150d-f257-4e30-9ae4-97b419ea3934","requestedFor":"IBMTest@SANFRAN.PBM.IHOST.COM","businessGroupId":"3bba782d-4a83-44ed-9ef0-c6cc4f83e9da","description":null,"reasons":"'
> 					+ descriptionCustomVRA
> 					+ '","data":{"AIX_71":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"AIX*AIX_71","data":{"_cluster":1,"_hasChildren":false,"cpu":2,"description":"AIX 7.1 PowerVM","flavor":"'+flavorID+'","key_pair":"0","max_per_user":0,"memory":8192,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":{"componentId":null,"classId":"Infrastructure.Reservation.Policy.ComputeResource","id":"PowerVC 1.3.2","label":"PowerVC 1.3.2"}}},"_leaseDays":1,"_number_of_instances":1}}';
> 		}
> 		else if (blueprintToDeploy === "CentOS") {
> 			// the id = 6fc621f6-5472-4f9f-99b9-67e8b8e7e212 correspond to the
> 			// CentOS 7.2 Base on x86 Simple Blueprint Catalog Item in vRA
> 			oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/eb9abaf7-7c47-4a88-94b7-4bd7cb20d8e8/requests";
> 			// Here under this is a json template request for this catalog item.
> 			// Customized with a medium flavor as an example and a description
> 			post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"eb9abaf7-7c47-4a88-94b7-4bd7cb20d8e8","requestedFor":"IBMTest@SANFRAN.PBM.IHOST.COM","businessGroupId":"3bba782d-4a83-44ed-9ef0-c6cc4f83e9da","description":null,"reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"Centos":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Centos*Centos","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"datacenter_location":null,"description":"Centos Linux VM","disks":[{"componentTypeId":"com.vmware.csp.iaas.blueprint.service","componentId":null,"classId":"Infrastructure.Compute.Machine.MachineDisk","typeFilter":null,"data":{"capacity":8,"custom_properties":null,"id":1491452004924,"initial_location":"","is_clone":true,"label":"Hard disk 1","storage_reservation_policy":"","userCreated":false,"volumeId":0}}],"display_location":false,"guest_customization_specification":null,"machine_prefix":null,"max_network_adapters":-1,"max_per_user":0,"max_volumes":60,"memory":2048,"nics":null,"os_arch":"x86_64","os_distribution":null,"os_type":"Linux","os_version":null,"ovfAuthNeeded":false,"ovf_proxy_endpoint":null,"ovf_url":null,"ovf_url_pwd":null,"ovf_url_username":null,"ovf_use_proxy":false,"property_groups":null,"reservation_policy":{"componentId":null,"classId":"Infrastructure.Reservation.Policy.ComputeResource","id":"vCenter","label":"vCenter"},"security_groups":[],"security_tags":[],"snapshot_name":null,"source_machine_external_snapshot":null,"source_machine_vmsnapshot":null}},"_archiveDays":4,"_leaseDays":1,"_number_of_instances":1}}';
> 		}
> 		else if (blueprintToDeploy === "MultiOS") {
> 			// the id = fa465bdb-a64a-416a-9d47-3f629ba86f77 correspond to the
> 			// Multiplatform Blueprint Catalog Item in vRA
> 			oauthPath = "/catalog-service/api/consumer/entitledCatalogItems/fa465bdb-a64a-416a-9d47-3f629ba86f77/requests";
> 			// Here under this is a json template request for this catalog item.
> 			// Customized with a medium flavor as an example and a description
> 			post_data = '{"type":"com.vmware.vcac.catalog.domain.request.CatalogItemProvisioningRequest","catalogItemId":"fa465bdb-a64a-416a-9d47-3f629ba86f77","requestedFor":"IBMTest@SANFRAN.PBM.IHOST.COM","businessGroupId":"3bba782d-4a83-44ed-9ef0-c6cc4f83e9da","description":null,"reasons":"'
> 				+ descriptionCustomVRA
> 				+ '","data":{"AIX_1":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"AppDB*AIX_1","data":{"AIX_71":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"AIX*AIX_71","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"description":"AIX 7.1 PowerVM","flavor":"a35232da-8131-427e-8b75-33c62dd5bd57","key_pair":"0","machine_prefix":null,"max_per_user":0,"memory":4096,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":{"componentId":null,"classId":"Infrastructure.Reservation.Policy.ComputeResource","id":"PowerVC 1.3.2","label":"PowerVC 1.3.2"}}},"_hasChildren":false,"_leaseDays":null,"_number_of_instances":1}},"Centos_1":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"AppDB*Centos_1","data":{"Centos":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"Centos*Centos","data":{"_cluster":1,"_hasChildren":false,"cpu":1,"datacenter_location":null,"description":"Centos Linux VM","disks":[{"componentTypeId":"com.vmware.csp.iaas.blueprint.service","componentId":null,"classId":"Infrastructure.Compute.Machine.MachineDisk","typeFilter":null,"data":{"capacity":8,"custom_properties":null,"id":1491452004924,"initial_location":"","is_clone":true,"label":"Hard disk 1","storage_reservation_policy":"","userCreated":false,"volumeId":0}}],"display_location":false,"guest_customization_specification":null,"machine_prefix":null,"max_network_adapters":-1,"max_per_user":0,"max_volumes":60,"memory":2048,"nics":null,"os_arch":"x86_64","os_distribution":null,"os_type":"Linux","os_version":null,"ovfAuthNeeded":false,"ovf_proxy_endpoint":null,"ovf_url":null,"ovf_url_pwd":null,"ovf_url_username":null,"ovf_use_proxy":false,"property_groups":null,"reservation_policy":{"componentId":null,"classId":"Infrastructure.Reservation.Policy.ComputeResource","id":"vCenter","label":"vCenter"},"security_groups":[],"security_tags":[],"snapshot_name":null,"source_machine_external_snapshot":null,"source_machine_vmsnapshot":null}},"_archiveDays":4,"_hasChildren":false,"_leaseDays":1,"_number_of_instances":1}},"IPPoolforvCenter":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"AppDB*IPPoolforvCenter","data":{"_hasChildren":false}},"IPpoolwithinstaticvradpvcpvmv98":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"AppDB*IPpoolwithinstaticvradpvcpvmv98","data":{"_hasChildren":false}},"LinuxonZ_1":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"AppDB*LinuxonZ_1","data":{"LoZ":{"componentTypeId":"com.vmware.csp.component.cafe.composition","componentId":null,"classId":"Blueprint.Component.Declaration","typeFilter":"LinuxonZ*LoZ","data":{"_cluster":1,"_hasChildren":false,"description":"Linux on Z Rhel on z/VM","flavor":"b7e75728-d781-49a6-909c-b60fc45d5c48","key_pair":"0","max_per_user":0,"openstack_securityGroups":null,"property_groups":null,"reservation_policy":{"componentId":null,"classId":"Infrastructure.Reservation.Policy.ComputeResource","id":"CMA","label":"CMA"}}},"_hasChildren":false,"_leaseDays":null,"_number_of_instances":1}},"_leaseDays":1,"_number_of_instances":1}}';
> 		}
> 		console.log("Entry in createVRAvServer");
> 
> 		var bearer = "Bearer " + oauthToken;
> 		console.log("****** " + bearer);
> 		var oauthOptions = {
> 			hostname : oauthHostname,
> 			port : "16532",
> 			//port : "",
> 			path : oauthPath,
> 			method : 'POST',
> 			rejectUnauthorized : false,
> 			headers : {
> 				'Content-Type' : 'application/json',
> 				'Authorization' : 'Bearer ' + oauthToken
> 
> 			}
> 		};
> 	}
> 
> 	// process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
> 	var oauthPost_req = https.request(oauthOptions, function(ans) {
> 		ans.setEncoding('utf8');
> 		var str = '';
> 		ans.on('data', function(chunk) {
> 			str += chunk;
> 		});
> 		ans.on('end', function() {
> 			console.log("**** Rest API Response ***" + str);
> 			console.log("***Http Status code***" + ans.statusCode);
> 			// console.log("HEADERS LIST ******"+ans.rawHeaders);
> 
> 			console.log("HEADERS LIST NUM 2 ******"
> 					+ JSON.stringify(ans.headers));
> 
> 			if (ans.statusCode !== 200 && ans.statusCode !== 201
> 					&& ans.statusCode !== 202) {
> 				console.error('ERROR WITH OAUTH TOKEN');
> 			} else {
> 
> 				var json = JSON.parse(str);
> 				console.log("RESPONSE from VRA Create Server Rest API call: "
> 						+ str);
> 				responsefromAWAP = str;
> 
> 			}
> 			// res.sendStatus(200);
> 			res.setHeader("Content-Type", "application/json");
> 			res.send(responsefromAWAP);
> 		});
> 	});
> 	oauthPost_req.write(post_data);
> 	oauthPost_req.end();
> 	
> }
> 
> function getCMAtenants(req, res) {
> 
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
> 
> 	var oauthHostname = "10.3.57.36";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15883" // 15883 MAP to port 5000 .TO use When AWAP Is deployed in BLUEMIX using the Secure Gateway integration service
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15121" // 15121 MAP to port 8774 .TO use When AWAP Is deployed in BLUEMIX using the Secure Gateway integration service
> 	var oauthPath = "/v2.0/tenants";
> 	console.log("get tenants getCMAtenants");
> 	console.log("TOKEN 3 IS SET TO : " + oauthToken);
> 	// var post_data = '{"auth":{"passwordCredentials":{"username":"admin",
> 	// "password":"something"}}}';
> 	var oauthOptions = {
> 		hostname : oauthHostname,
> 		port : 5000,
> 		path : oauthPath,
> 		method : 'GET',
> 		rejectUnauthorized : false,
> 		headers : {
> 			'Accept' : 'application/json',
> 			'X-Auth-Token' : oauthToken
> 		}
> 	};
> 
> 	var httpget = https.request(oauthOptions, function(ans) {
> 		ans.setEncoding('utf8');
> 		var str = '';
> 		ans.on('data', function(chunk) {
> 			str += chunk;
> 		});
> 		ans.on('end', function() {
> 			console.log(str);
> 			if (ans.statusCode !== 200) {
> 				console.error('ERROR WITH TENANTS REQUEST');
> 				res.sendStatus(500);
> 			} else {
> 				var json = JSON.parse(str);
> 				console.log("CMA zVM ALL TENANTS DEFINED: " + str);
> 				if (json && json.tenants.id !== '') {
> 					tenants = json.tenants;
> 					console.log("CMA zVM TENANT name: " + tenants[1].name
> 							+ " TENANTS id: " + tenants[1].id);
> 					responsefromAWAP = customizeMessageFromAWAP(req, str,
> 							"getCMAtenants");
> 				}
> 				res.setHeader("Content-Type", "application/json");
> 				res.send(responsefromAWAP);
> 			}
> 			// res.sendStatus(200);
> 
> 		});
> 	});
> 	httpget.end();
> 	// oauthPost_req.write(post_data);
> 	// oauthPost_req.end();
> }
> 
> function getCMAvirtualserverInfo(req,res) {
> 
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
>     
> 	// wait 15 seconds
> 	sleep(15000);
> 	
> 	var oauthHostname = "10.3.57.36";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com"
> 	// var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15883" // MAP
> 	// to port 5000 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15121"; // MAP
> 	// to port 8774 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	var oauthPath = "/v2/" + tenantID + "/servers/" + vserverID;
> 	console.log("Get server detailed information");
> 	console.log("oauthPath: " + oauthPath);
> 	// var post_data = '{"auth":{"passwordCredentials":{"username":"admin",
> 	// "password":"something"}}}';
> 	var oauthOptions = {
> 		hostname : oauthHostname,
> 		port : 8774,
> 		path : oauthPath,
> 		method : 'GET',
> 		rejectUnauthorized : false,
> 		headers : {
> 			'Accept' : 'application/json',
> 			'X-Auth-Token' : oauthToken
> 		}
> 	};
> 
> 	var httpget = https
> 			.request(
> 					oauthOptions,
> 					function(ans) {
> 						ans.setEncoding('utf8');
> 						var str = '';
> 						ans.on('data', function(chunk) {
> 							str += chunk;
> 						});
> 						ans
> 								.on(
> 										'end',
> 										function() {
> 											console.log(str);
> 											if (ans.statusCode !== 200) {
> 												console
> 														.error('ERROR WITH SERVER DETAILED INFORMATION REQUEST');
> 
> 											} else {
> 												var json = JSON.parse(str);
> 												console
> 														.log("CMA zVM Virtual Server Info: "
> 																+ str);
> 												//responsefromAWAP = str;
> 
> 												
> 												  
> 												  responsefromAWAP="Your Virtual Server Name : <b>" +json.server.name +"</b><br>IP Address: <b>"+json.server.addresses["zNTC357"][0].addr+"</b>";
> 												 
> 												 res.setHeader("Content-Type","application/json");
> 												 res.send(responsefromAWAP);
> 											}
> 											//res.sendStatus("200");
> 
> 										});
> 					});
> 
> 	httpget.end();
> 
> 	// oauthPost_req.write(post_data);
> 	// oauthPost_req.end();
> 
> }
> 
> var waitingList={};
> 
> function waitandnotify(action,serverID) {
> 
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
>     // wait 15 seconds
> 	sleep(15000);
> 	
> 	var oauthHostname = "10.3.57.36";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com"
> 	// var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15883" // MAP
> 	// to port 5000 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15121"; // MAP
> 	// to port 8774 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	var oauthPath = "/v2/" + tenantID + "/servers/" + serverID;
> 	console.log("Get server detailed information");
> 	console.log("oauthPath: " + oauthPath);
42a595,888
> 	var oauthOptions = {
> 		hostname : oauthHostname,
> 		port : 8774,
> 		path : oauthPath,
> 		method : 'GET',
> 		rejectUnauthorized : false,
> 		headers : {
> 			'Accept' : 'application/json',
> 			'X-Auth-Token' : oauthToken
> 		}
> 	};
> //if(waitingList[serverID]) {
> 	var httpget = https
> 			.request(
> 					oauthOptions,
> 					function(ans) {
> 						ans.setEncoding('utf8');
> 						var str = '';
> 						ans.on('data', function(chunk) {
> 							str += chunk;
> 						});
> 						ans
> 								.on(
> 										'end',
> 										function() {
> 											console.log(str);
> 											if (ans.statusCode !== 200) {
> 												console
> 														.error('ERROR WITH SERVER DETAILED INFORMATION REQUEST');
> 
> 											} else {
> 												var json = JSON.parse(str);
> 												console
> 														.log("CMA zVM Virtual Server Info: "
> 																+ str);
> 												// 0: NOSTATE,1: RUNNING,3: PAUSED,4: SHUTDOWN,	6: CRASHED, 7: SUSPENDED
> 												console.log("Server Status:" +json.server['OS-EXT-STS:power_state']);
> 												
> 												if (json.server['OS-EXT-STS:power_state']==1)
> 													{
> 													
> 													//delete waitingList[serverID];
> 													console.log("Your Virtual Server is now running Name : <b>" +json.server.name +"</b><br>IP Address: <b>"+json.server.addresses["zNTC357"][0].addr+"</b>");
> 													}
> 												else {
> 													console.log("Still Waiting for 15 seconds");
> 													//waitandnotify(action,serverID);
> 												}
> 											}
> 											//res.sendStatus("200");
> 
> 										});
> 					});
> 
> 	httpget.end();
> 	//}
> 
> 	// oauthPost_req.write(post_data);
> 	// oauthPost_req.end();
> 
> }
> 
> 
> 
> 
> 
> function initCMAauth(req, res) {
> 
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
> 
> 	var oauthHostname = "10.3.57.36";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com";
> 	// var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15883" // MAP
> 	// to port 5000 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15121"; // MAP
> 	// to port 8774 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	// var oauthPath = "/v2.0/tokens";
> 	var oauthPath = "/v3/auth/tokens?nocatalog";
> 	console.log("Entry in initCMAauth");
> 	// var post_data = '{"auth":{"passwordCredentials":{"username":"admin",
> 	// "password":"something"}},"scope": { "project": { "domain": { "name":
> 	// "Default" }, "name": "admin" } }}';
> 	var post_data = '{ "auth": { "identity": { "methods": [ "password" ], "password": { "user": { "domain": { "name": "Default" }, "name": "admin", "password": "cmo4ntc" } } }, "scope": { "project": { "domain": { "name": "Default" }, "name": "admin" } } } }';
> 	var oauthOptions = {
> 		hostname : oauthHostname,
> 		port : 5000,
> 		path : oauthPath,
> 		method : 'POST',
> 		rejectUnauthorized : false,
> 		headers : {
> 			'Contehnt-Type' : 'application/json',
> 			'Content-Length' : Buffer.byteLength(post_data),
> 			'Accept' : 'application/json'
> 		}
> 	};
> 
> 	var oauthPost_req = https.request(oauthOptions, function(ans) {
> 		ans.setEncoding('utf8');
> 		var str = '';
> 		ans.on('data', function(chunk) {
> 			str += chunk;
> 		});
> 		ans.on('end', function() {
> 			console.log("**** Rest API Response ***" + str);
> 			console.log("***Http Status code***" + ans.statusCode);
> 			// console.log("HEADERS LIST ******"+ans.rawHeaders);
> 			var headerInfo = JSON.stringify(ans.headers);
> 			console.log("HEADERS LIST NUM 2 ******"
> 					+ JSON.stringify(ans.headers));
> 
> 			if (ans.statusCode !== 200 && ans.statusCode !== 201
> 					&& ans.statusCode !== 202) {
> 				console.error('ERROR WITH OAUTH TOKEN');
> 			} else {
> 
> 				var json = JSON.parse(headerInfo);
> 				console.log("logging the Token: " + json["x-subject-token"]);
> 				console.log("x-openstack-request-id: "
> 						+ json["x-openstack-request-id"]);
> 				if (json && json["x-subject-token"] !== '') {
> 					oauthToken = json["x-subject-token"];
> 					console.log("TOKEN IS NOW SET TO: " + oauthToken);
> 
> 					getCMAtenants(req, res);
> 				}
> 			}
> 		});
> 	});
> 	oauthPost_req.write(post_data);
> 	oauthPost_req.end();
> 
> }
> 
> function createCMAvserver(req, res) {
> 	// this fucntion creates a new virtual machine on the CMA
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
> 	var serverName = "FromAWAPOnPremises" + oauthToken.substr(2, 3);
> 	var imageRef = "3ebafd17-539e-446e-972d-af7407e47916"; // Ubuntu Image by
> 															// default in CMA
> 															// z/VM
> 	var flavorRef = "35a7752f-e463-44f4-8e4c-73d499550f62"; // Small VM by
> 															// default in CMA
> 															// z/VM
> 	var imageSelected;
> 	var flavorSelected;
> 	// User Data to create a file in /tmp and just mention you can do anything
> 	// here
> 	var userData = "IyEvYmluL3NoDQplY2hvICJhbnl0aGluZyB5b3Ugd291bGQgbGlrZSB0byBkbyIgPiAvdG1wL215c2NyaXB0UmVzdWx0LnR4dA0KIyBNaW5pbWFsIFN3YXAgZmlsZSBjcmVhdGlvbg0KZGQgaWY9L2Rldi96ZXJvIG9mPS9zd2FwZmlsZSBicz0xMDI0IGNvdW50PTI2MjE0NA0KbWtzd2FwIC9zd2FwZmlsZQ0KY2htb2QgMDYwMCAvc3dhcGZpbGUNCnN3YXBvbiAvc3dhcGZpbGUNCg==";
> 	// User Data to do something else on the fly :-). uncomment and change the
> 	// value here under then comment the line above.
> 	// var
> 	// userData="IyEvYmluL3NoDQphcHQtZ2V0IC15IGluc3RhbGwgbmZzLWNvbW1vbg0KYXB0LWdldCAteSBpbnN0YWxsIGRvY2tlci5pbw0KYXB0LWdldCAteSBpbnN0YWxsIGRvY2tlci1jb21wb3NlDQpub3QgbmVlZGVkID0+IFtkb2NrZXIgcHVsbCBzMzkweC93b3JkcHJlc3NdDQpub3QgbmVlZGVkID0+IFtkb2NrZXIgcHVsbCBzaW5lbm9taW5lL21hcmlhZGItczM5MHhdDQptb3VudCAxMC4zLjU3LjE0MDovbmZzL3NvZnR3YXJlL2RvY2tlci9zYW1wbGVzIC9tbnQNCmNwIC9tbnQvc3RhY2tXb3JkUHJlc3NEZW1vLnltbCAvdG1wDQpkb2NrZXItY29tcG9zZSAtZiAvdG1wL3N0YWNrV29yZFByZXNzRGVtby55bWwgdXAgJg==";
> 	for (var i = 0; i < req.body.entities.length; i++) {
> 		if (req.body.entities[i].entity === "LinuxImage") {
> 			imageSelected = req.body.entities[i].value;
> 
> 		}
> 		if (req.body.entities[i].entity === "VMdefinition") {
> 			flavorSelected = req.body.entities[i].value;
> 		}
> 	}
> 	console.log("IMAGE Selected from user input: " + imageSelected);
> 	console.log("IMAGE Selected from context : " + req.body.context.image);
> 	// validate the LinuxImage has been correctly set
> 	if ((imageSelected != "Redhat") && (imageSelected != "SLES")
> 			&& (imageSelected != "Ubuntu")) {
> 		console.log("Affect the right image");
> 		imageSelected = req.body.context.image;
> 	}
> 
> 	console.log("FLAVOR Selected: " + flavorSelected);
> 
> 	if (imageSelected === "Redhat") {
> 		console.log('Redhat Selected');
> 		imageRef = "bde5aa76-8ff6-444e-919b-195a075d13f6";
> 	} else {
> 		if (imageSelected === "SLES") {
> 			console.log("SLES Selected");
> 			imageRef = "a4b25d86-91cd-4311-9ccc-dce00429a93c";
> 			
> 		} else {
> 			if (imageSelected === "Ubuntu") {
> 				console.log("Ubuntu Selected");
> 				console.log("Docker info:"+req.body.context.docker);
> 				/*by default with Ubuntu I used a Docker Compose deployment of a WordPress container and a MariaDB container. Access to http://IP:8080 to check it worked !*/
> 				if (req.body.context.docker==="yes"){
> 					console.log("Modifying User Data for Docker Deployment");
> 				userData="IyEvYmluL3NoDQphcHQtZ2V0IHVwZGF0ZQ0KYXB0LWdldCB1cGdyYWRlIC15IC0tZm9yY2UteWVzDQphcHQtZ2V0IC15IGluc3RhbGwgbmZzLWNvbW1vbg0KYXB0LWdldCAteSBpbnN0YWxsIGRvY2tlci5pbw0KYXB0LWdldCAteSBpbnN0YWxsIGRvY2tlci1jb21wb3NlDQpzeXN0ZW1jdGwgc3RhcnQgZG9ja2VyLnNlcnZpY2UNCm1vdW50IDEwLjMuNTcuMTQwOi9uZnMvc29mdHdhcmUvZG9ja2VyL3NhbXBsZXMgL21udA0KY3AgL21udC9zdGFja1dvcmRQcmVzc0RlbW8ueW1sIC90bXANCnVtb3VudCAvbW50DQpkb2NrZXItY29tcG9zZSAtZiAvdG1wL3N0YWNrV29yZFByZXNzRGVtby55bWwgdXA=";
> 				}
> 				imageRef = "3ebafd17-539e-446e-972d-af7407e47916";
> 			}
> 		}
> 	}
> 
> 	if (flavorSelected === "small") {
> 		console.log('Small vm Selected');
> 	} else {
> 
> 		if (flavorSelected === "medium") {
> 			console.log('Medium vm Selected');
> 			flavorRef = "03fbd4c1-1756-49aa-a0fb-0aa9e10304e3";
> 		} else {
> 			console.log('Large vm Selected');
> 			flavorRef = "49b9602c-19b0-4015-bab6-6a78a6fae9ad";
> 		}
> 	}
> 
> 	var oauthHostname = "10.3.57.36";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com";
> 		
> 	// var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15883" // MAP
> 	// to port 5000 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com:15121"; // MAP
> 	// to port 8774 .TO use When AWAP Is deployed in BLUEMIX using the Secure
> 	// Gateway integration service
> 	var oauthPath = "/v2/87720db25dec44d0bc4413dab53c52fd/servers";
> 	console.log("Entry in createCMAserver");
> 	console.log("***Value for use Data in clear Text: " + userData);
> 	console.log("***Value for use Data in Base64 Encoding: " + btoa(userData));
> 	// var post_data = '{"server": {"min_count": 1, "flavorRef":
> 	// "'+flavorRef+'", "name":"'+serverName+'", "imageRef": "'+imageRef+'",
> 	// "networks":[{"uuid":"3b102da8-2481-4817-a69f-e8b96bfbbab0"}],"max_count":
> 	// 1}}';
> 	var post_data = '{"server": {"min_count": 1, "flavorRef": "'
> 			+ flavorRef
> 			+ '", "name":"'
> 			+ serverName
> 			+ '", "imageRef": "'
> 			+ imageRef
> 			+ '","user_data": "'
> 			+ userData
> 			+ '", "networks":[{"uuid":"834d953a-7617-48c8-a18a-3e5b86335a30"}],"max_count": 1}}';
> 	// Default On-prem. deployment => var oauthOptions = { hostname:
> 	// oauthHostname, port: 8774, ....blabla)
> 	// deployment on Bluemix with integration service secure gateway.
> 	var oauthOptions = {
> 		hostname : oauthHostname,
> 		port : 8774,
> 		path : oauthPath,
> 		method : 'POST',
> 		rejectUnauthorized : false,
> 		headers : {
> 			'Content-Type' : 'application/json',
> 			'Content-Length' : Buffer.byteLength(post_data),
> 			'Accept' : 'application/json',
> 			'X-Auth-Token' : oauthToken
> 		}
> 	};
> 
> 	var oauthPost_req = https.request(oauthOptions, function(ans) {
> 		ans.setEncoding('utf8');
> 		var str = '';
> 		ans.on('data', function(chunk) {
> 			str += chunk;
> 		});
> 		ans.on('end', function() {
> 			console.log("**** Rest API Response ***" + str);
> 			console.log("***Http Status code***" + ans.statusCode);
> 			if (ans.statusCode !== 200 && ans.statusCode !== 201
> 					&& ans.statusCode !== 202) {
> 				console.error('ERROR WITH REQUEST');
> 			} else {
> 				var json = JSON.parse(str);
> 				console
> 						.log("RESPONSE from Create Server Rest API call: "
> 								+ str);
> 				responsefromAWAP = str;
> 				customizeMessageFromAWAP(req,str,"createCMAvserver");
> 				
> 			}
> 			// res.sendStatus(200);
> 			res.setHeader("Content-Type", "application/json");
> 			res.send(responsefromAWAP);
> 			if (ans.statusCode==200 || ans.statusCode==201 || ans.statusCode==202) {
> 				//waitingList[vserverID]=true;
> 				//waitandnotify("",vserverID);
> 				
> 			}
> 		});
> 	});
> 	oauthPost_req.write(post_data);
> 	oauthPost_req.end();
> }
> 
> function executeOpenAudelcall(req, res) {
> 
> 	var reqbody = JSON.stringify(req.body);
> 	var openAudelProjectselected;
> 	//var openAudelhost="cap-sg-prd-3.integration.ibmcloud.com"; // MAP port 22: cap-sg-prd-3.integration.ibmcloud.com:16018
45c891
< 			provisionProjectselected = req.body.entities[i].value;
---
> 			openAudelProjectselected = req.body.entities[i].value;
48,53c894,897
< 	console.log("Deploy a virtual server image based on user interaction: "
< 			+ provisionProjectselected);
< 	// MAP Project names to internal provisioning system name. 
< 	// This may also be exported in the Watson Assistant service if required.
< 	if (provisionProjectselected === "ClefOS") {
< 		provisionProjectselected = "CLEFOS74";
---
> 	console.log("OpenAudel project Selected from user input: "
> 			+ openAudelProjectselected);
> 	if (openAudelProjectselected === "ClefOS") {
> 		openAudelProjectselected = "CLEFOS72";
55,56c899,900
< 	if (provisionProjectselected === "Redhat") {
< 		provisionProjectselected = "RHEL7U5";
---
> 	if (openAudelProjectselected === "Redhat") {
> 		openAudelProjectselected = "RHEL7U4_357";
58,59c902,903
< 	if (provisionProjectselected === "SLES") {
< 		provisionProjectselected = "SLS12SP4";
---
> 	if (openAudelProjectselected === "SLES") {
> 		openAudelProjectselected = "SLS12SP3_357";
61,62c905,906
< 	if (provisionProjectselected === "Ubuntu") {
< 		provisionProjectselected = "UBUNTU1804";
---
> 	if (openAudelProjectselected === "Ubuntu") {
> 		openAudelProjectselected = "UBUNTU_Z_357";
64,66c908,910
< 	// ssh -p YOUR_PORT_NUMBER YOUR_USER@YOUR_PUBLIC_IP_ADDRESS YOUR_PROVISIONING_COMMAND 
< 	var child = exec('ssh -p 22 sebll@localhost echo coucou > /tmp/'
< 			+ provisionProjectselected + '.txt', function(error, stdout, stderr) { // one
---
> //ssh -p 16018 root@cap-sg-prd-3.integration.ibmcloud.com
> 	var child = exec('ssh -p 16018 root@cap-sg-prd-3.integration.ibmcloud.com submit -j '
> 			+ openAudelProjectselected + ' 1', function(error, stdout, stderr) { // one
81a926,958
> function initICPauth(req, res) {
> 
> 	var reqbody = JSON.stringify(req.body);
> 	var icpInit;
> 	//var openAudelhost="cap-sg-prd-3.integration.ibmcloud.com"; // MAP port 22: cap-sg-prd-3.integration.ibmcloud.com:16018
> 	/*for (var i = 0; i < req.body.entities.length; i++) {
> 		if (req.body.entities[i].entity === "LinuxImage") {
> 			openAudelProjectselected = req.body.entities[i].value;
> 		}
> 	} */
> 	console.log("ICP token generation using ICP CLI");
> 	
> //ssh -p 16018 root@cap-sg-prd-3.integration.ibmcloud.com
> 	/*var child = exec('ssh -p 16018 root@cap-sg-prd-3.integration.ibmcloud.com submit -j '
> 			+ openAudelProjectselected + ' 1', function(error, stdout, stderr) {
> 				// one easy function to capture data/errors
> 		console.log('stdout: ' + stdout);
> 		console.log('stderr: ' + stderr);
> 		if (error !== null) {
> 			console.log('exec error: ' + error);
> 		}
> 	});
> 	res.sendStatus(200); */
> 	
> }
> 
> function createICPdeployment(req, res) {
> 	// this function creates a new virtual machine on the CMA
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
> 	var deploymentName = "ICPdeployment";	
> 	console.log("ICP deployment using ICP CLI");
> }
83d959
< // SECTION HERE UNDER TO INTERCEPT ALL CALLS FROM TakeAction.js
84a961
> function executeOpenPrezcall(req, res) {
86,87c963,1125
< // Demo LinuxONE Calls
< router.post('/api/cloud/callProvisioningSystem', executeProvisioningFromDialog);
---
> 	/*var reqbody = JSON.stringify(req.body);
> 	var openPresentationselected;
> 	for (var i = 0; i < req.body.entities.length; i++) {
> 		if (req.body.entities[i].entity === "LinuxImage") {
> 			openAudelProjectselected = req.body.entities[i].value;
> 		}
> 	}
> 	console.log("OpenAudel project Selected from user input: "
> 			+ openAudelProjectselected);
> 	if (openAudelProjectselected === "ClefOS") {
> 		openAudelProjectselected = "CLEFOS72";
> 	} */
> 	
> 	// wait 10 seconds
> 	sleep(10000);
> 	var child = exec('LaunchCloudDevOpsLinuxPrez.sh', function(error, stdout, stderr) { // one
> 																					// easy
> 																					// function
> 																					// to
> 																					// capture
> 																					// data/errors
> 		console.log('stdout: ' + stdout);
> 		console.log('stderr: ' + stderr);
> 		if (error !== null) {
> 			console.log('exec error: ' + error);
> 		}
> 	});
> 	res.sendStatus(200);
> 	
> }
> 
> function secureTheEnvironment(req,res) {
> 	// NOTE: in order to demonstrate the security use cases, it will be necessary to 
> 	// ask in the conversation on which server you need to deploy the level of security selected
> 	// It is needed to list the known servers to AWAP or ask to create one. 
> 	// This way it will get much easier to fill-in the variable identifyServerOnWhichToExecuteAction
> 	// var clientId = "admin";
> 	// var clientSecret = "anypass";
>     
> 	// wait 15 seconds
> 	sleep(15000);
> 	
> 	var reqbody = JSON.stringify(req.body);
> 	var identifyServerOnWhichToExecuteAction;
> 	var securityScenarioToRun=req.body.context.securityScenario;
> 	
> 	for (var i = 0; i < req.body.entities.length; i++) {
> 		if (req.body.entities[i].entity === "ServerNameToSecure") {
> 			identifyServerOnWhichToExecuteAction = req.body.entities[i].value;
> 		}
> 	}
> 	console.log("Server To Secure Identified from user input: "
> 			+ identifyServerOnWhichToExecuteAction);
> 	if (identifyServerOnWhichToExecuteAction === "NEW") {
> 		// May be needed to create HERE a linux virtual machine but it would be better to just
> 		// execute the action and give the answer bac kto the user;
> 	} else
> 		{
> 		// The ip address may have been already populated here. Otherwise, a code will be needed 
> 		// here to retrieve the IP address from the server Name
> 		}
> 		
> 		
>     // Note: to ease the management of the deployments the secure gateway client virtual server
> 	// will host the scripts for security execution in the private cloud. 
> 	// Note : An endpoint will have to be define in bluemix to access the secure gateway client in mop 10.3.57.240
> 	
> 	// This is where the different actions to execute will be selected.
> 	// Here commands will be different based on user request: data-in-flight or at-rest and so on
> 	// various scenarios will be handled here. 
> 	// A variable securityScenarioToRun will allow to choose which script to execute on the 
> 	// gateway client against the remote Linux or (z/OS ^^) virtual server.
> 	var child = exec('ssh root@10.3.57.240 submit -j '
> 			+ openAudelProjectselected + ' 1', function(error, stdout, stderr) { // one
> 																					// easy
> 																					// function
> 																					// to
> 																					// capture
> 																					// data/errors
> 		console.log('stdout: ' + stdout);
> 		// function Parse stout need to be coded HERE
> 		// it will capture the right information back from the command line
> 		// it will format it and place the result in responseFromCommand variable
> 		console.log('stderr: ' + stderr);
> 		if (error !== null) {
> 			console.log('exec error: ' + error);
> 		}
> 	});
> 	 responsefromAWAP="Security Actions Performed on : <b>" +identifyServerOnWhichToExecuteAction +"</b><br> Informations: <b>"+responseFromCommand+"</b>";
> 	 
> 	 res.setHeader("Content-Type","application/json");
> 	 res.send(responsefromAWAP);
> 	 res.sendStatus(200);
> 	
> 	
> 	
> 	var oauthHostname = "10.3.57.36";
> 	//var oauthHostname = "cap-sg-prd-3.integration.ibmcloud.com"
> 	var oauthPath = "/v2/" + tenantID + "/servers/" + vserverID;
> 	console.log("Get server detailed information");
> 	console.log("oauthPath: " + oauthPath);
> 	// var post_data = '{"auth":{"passwordCredentials":{"username":"admin",
> 	// "password":"something"}}}';
> 	var oauthOptions = {
> 		hostname : oauthHostname,
> 		port : 8774,
> 		path : oauthPath,
> 		method : 'GET',
> 		rejectUnauthorized : false,
> 		headers : {
> 			'Accept' : 'application/json',
> 			'X-Auth-Token' : oauthToken
> 		}
> 	};
> 
> 	var httpget = https
> 			.request(
> 					oauthOptions,
> 					function(ans) {
> 						ans.setEncoding('utf8');
> 						var str = '';
> 						ans.on('data', function(chunk) {
> 							str += chunk;
> 						});
> 						ans
> 								.on(
> 										'end',
> 										function() {
> 											console.log(str);
> 											if (ans.statusCode !== 200) {
> 												console
> 														.error('ERROR WITH SERVER DETAILED INFORMATION REQUEST');
> 
> 											} else {
> 												var json = JSON.parse(str);
> 												console
> 														.log("CMA zVM Virtual Server Info: "
> 																+ str);
> 												//responsefromAWAP = str;
> 
> 												
> 												  
> 												  responsefromAWAP="Your Virtual Server Name : <b>" +json.server.name +"</b><br>IP Address: <b>"+json.server.addresses["zNTC357"][0].addr+"</b>";
> 												 
> 												 res.setHeader("Content-Type","application/json");
> 												 res.send(responsefromAWAP);
> 											}
> 											//res.sendStatus("200");
> 
> 										});
> 					});
> 
> 	httpget.end();
> 
> 	// oauthPost_req.write(post_data);
> 	// oauthPost_req.end();
> 
> }
> 
> 
> 
> 
> // SECTION HERE UNDER TO INTERCEPT ALL CALLS FROM TakeAction.js
88a1127,1143
> // VMWare vRealize Calls
> router.post('/api/cloud/vra', initVRAauth);
> router.post('/api/cloud/vraCreateServer', createVRAvServer);
> // Cloud Manager Appliance Calls
> router.get('/api/cloud/tenants', initCMAauth);
> router.post('/api/cloud/createserver', createCMAvserver);
> router.post('/api/cloud/vraDisplayServer',getCMAvirtualserverInfo);
> // OpenAudel Calls
> router.post('/api/cloud/callOpenAudel', executeOpenAudelcall);
> // IBM Cloud Private Calls
> router.post('/api/cloud/icp/auth', initICPauth);
> //router.post('/api/cloud/icp/createDeployment', createICPdeployment);
> // Presentation Management Calls
> router.post('/api/prez/openAPresentation', executeOpenPrezcall);
> module.exports = exports = router;
> // Security Cryptographic Calls
> router.post('/api/security/crypto',secureTheEnvironment);
